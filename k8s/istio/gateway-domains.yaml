#kubectl apply -f k8s/istio/gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway-k3s
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
    - port:
        number: 80 # 80 -> 32575(node)
        name: http
        protocol: http2
      hosts:
      - "*.leothenardo" # use your domain here

---
# kubectl apply -f k8s/istio/vs.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nginx-vs-a
spec:
  hosts: # bind to gateway
    - a.leothenardo
  gateways:
    - ingress-gateway-k3s # bind to gateway
  http:
    - route:
      - destination:
          host: nginx-service
          subset: v1 # FLOW: a.leothenardo:8000 -> nginx svc -> vs -> subset v1 -> DR
---
# kubectl apply -f k8s/istio/vs.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nginx-vs-b
spec:
  hosts: # bind to gateway
    - b.leothenardo
  gateways:
    - ingress-gateway-k3s # bind to gateway
  http:
    - route:
        - destination:
            host: nginx-service
            subset: v2 # FLOW: a.leothenardo:8000 -> nginx svc -> vs -> subset v2 -> DR
---

## kubectl apply -f k8s/istio/dr.yaml
#apiVersion: networking.istio.io/v1alpha3
#kind: DestinationRule
#metadata:
#  name: nginx-dr
#spec:
#  host: nginx-service
#  trafficPolicy:
#    loadBalancer:
#      simple: ROUND_ROBIN
#  subsets:
#    - name: v1
#      labels:
#        version: "1.0" # FLOW: VS -> DR subset v1 -> Pod with label version: "1.0"
#      trafficPolicy:
#        loadBalancer:
#          simple: LEAST_CONN
#    - name: v2
#      labels:
#        version: "2.0"
